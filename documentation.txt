Udemy Next JS Course - Stephen Grider


Section 01 - Get Started Here !

01. How to Learn NextjJS Quickly

02. Project Overview
-u terminalu instaliramo NextJS aplikaciju sa komandom npx create-next-app@latest 
-udemo u folder sa komandom cd corp
-u terminal ukucamo komandu npm run dev da pokrenemo Next JS aplikaciju

03. File-Based Routing
-u page.tsx fajlu izbrisemo sadrzaj u jsx-u i ostavimo samo jedan div element

04. Adding Additional Routes
-kreiramo foldere performance, reliability i scale
-u svakom kreiranom folderu kreiramo page.tsx fajl
-u svakom page.tsx fajlu kreiramo i eksportujemo funkciju

05. Linking Between Pages
-u app/page.txs fajl importujemo komponentu Link iz pakete next/link
-u jsx-u kreiramo div element za komponente Link
-kreiramo tri komponente Link sa prop href

06. Common UI in Next JS with Layouts
-u globals.css fajlu izbrisemo CSS stil 
-iz app/page.tsx fajla premjestamo div element sa komponetama Link u layout.tsx fajl
-u layout.txs fajlu kreiramo jos jednu komponentu Link koja ce nas navigirati na home page

07. Project Structure Strategy
-u folderu src kreiramo folder components
-u folderu components kreiramo header.tsx komponentu
-u layout.tsx fajl importujemo komponentu header.tsx

08. Absolute Path Import Shortcut
-u layout.tsx fajl dodajemo @ kod importa komponente header.tsx

09. Image Files + Import Update
-preuzmemo folder sa slikama koje su potrebne za projekt

10. Adding Images in Next JS
-kreiramo folder public i koji dodajemo prethodno preuzete slike
-u app/page.tsx fajl importujemo komponentu Image iz next/image paketa
-importujemo sliku homeImg 

11. More on the Image Component
-u app/page.tsx fajlu komponenti Image dodajemo prop width i height

12. Adding a Reusable Presentation Component
-u folderu components kreiramo komponentu hero.tsx
-div element sa slikom iz app/page.tsx fajla premjestamo u komponentu hero.tsx 
-u komponentu hero.tsx importujemo tip StaticImageData iz paketa next/image
-importujemo komponentu Image iz paketa next/image
-kreiramo interfejs interface HeroProps
-u interfejs HeroProps dodajemo opcije imgData, imgAlt i title
-kreiramo div element koji ce da sluzi gradient 
-funkciji Hero() dodajemo parametar props: HeroProps
-u jsx-u komponenti Image, dodajemo u src i alt vrijednosti imgData i imgAlt 
-kreiramo div element i unutar njega h1 element
-u h1 element dodajemo naslov props.title
-u app/page.tsx fajl importujemo komponentu hero.tsx
-u jsx-u kreiramo komponentu Hero
-komponenti Hero dodajemo prop imgData, imgAlt i title

13. Adding Some Styling
-u folderima performance, reliability i scale, u page.tsx fajlove dodajemo slike i komponentu Hero
-u komponentu header.tsx dodajemo Tailwind CSS stil 

14. Production Deployment with Vercel
-u terminalu navigiramo u folder cd corp i ukucamo komandu npx vercel
-pratimo uputstva iz videa
-u .gitignore fajlu dodana opcija .vercel
-otvorimo web stranicu https://vercel.com/ da vidimo nas projekt
-otvorimo link: https://udemy-nextjs-course-sg-01-section-corp.vercel.app/

15. Join Our Community!
-link za pristup Diskord serveru

16. Course Diagrams
-preuzet folder sa dijagramima 
-kreiran folder 00-diagrams sa pdf fajlovima


Section 02: Changing Data with Mutations

17. App Overview
-kreiramo Next.js projekt sa imenom snippets

18. Project Setup
-u terminalu navigiramo u projekt snippets u ukucamo komandu npm i prisma
-u terminalu ukucamo komandu npx prisma init --datasource-provider sqlite
-u schema.prisma fajlu kreiramo model Snippet
-u terminal ukucamo komandu npx prisma migrate dev

19. Adding a Create Page
-u globals.css fajlu izbrisemo css stil
-u app/page.tsx fajlu ostavimo samo div element
-u folderu app kreiramo folder snippets
-u folderu snippets kreiramo folder new
-u folderu new kreiramo page.tsx fajl

20. Creating a Prisma Client within Next.js
-u src folderu kreiramo folder db i index.ts fajl
-i index.ts fajl importujemo funkciju PrismaClient iz Prisma paketa
-dodajemo metodu new PrismaClient()
-vrijednost metode new PrismaClient() pohranjujemo u varijablu const db
-eksportujemo varijablu const db

21. Adding a Creation Form
-u layout.tsx fajlu kreiramo div element sa Tailwind CSS klasama u koji dodajemo prop children
-u page.tsx fajlu kreiramo HTML elemente sa Tailwind CSS klasama za formu


Section 03: Streaming Content with React Server Components

22. Introduction Server Actions in Next.js
-u snippets/new page.tsx fajlu kreiramo asinhronu funkciju createSnippet()
-u funkciju createSnippet() dodajemo direktivu 'use server'
-funkciji createSnippet() dodajemo parametar formData
-parametru formData dodajemo tip FormData
-kreiramo varijable const title i const code
-importujemo instancu db
-dodajemo metodu await db.snippet.create()
-vrijednost metode await db.snippet.create() pohranjujemo u varijablu const snippet
-importujemo funkciju redirect iz paketa next/navigation
-u funkciju createSnippet() dodajemo funkciju redirect('/')
-u jsx-u form elementu dodajemo prop action
-u prop action proslijedujemo funkciju createSnippet

23. A Deeper Dive into Server Actions

24. Server Components vs Client Components

25. Fetching Data with Server Components
-u app/page.tsx fajl importujemo instancu db
-funkciji Home() dodajemo async
-u funkciju Home() dodajemo metodu await db.snippet.findMany()
-vrijednost metode await db.snippet.findMany() pohranjujemo varijablu const snippets
-dodajemo metodu snippets.map()
-vrijednost metode snippets.map() pohranjujemo u varijablu const renderedSnippets
-u jsx-u prikazujemo varijablu renderedSnippets

26. Adding Dynamic Paths
-u folderu snippets kreiramo folder [id] i page.tsx fajl
-u [id]/page.tsx fajlu, funkciji SnippetShowPage() dodajemo parametar props i tip any

27. Fetching Particular Records
-u [id]/page.tsx fajlu funkciji SnippetShowPage() dodajemo async
-importujemo instancu db
-kreiramo interface SnippetShowPageProps
-u funkciji SnippetShowPage() parametru props dodajemo tip SnippetShowPageProps
-dodajemo metodu await db.snippet.findFirst()
-vrijednost metode await db.snippet.findFirst() pohranjujemo u varijablu const snippet
-dodajemo uslov if (!snippet)
-importujemo funkciju notFound iz paketa next/navigation
-u uslov if (!snippet) dodajemo funkciju notFound()

28. Custom Not Found Pages
-u folderu [id] kreiramo not-found.tsx fajl
-u not-found.tsx fajlu kreiramo funkciju SnippetNotFound()

29. Automatic Loading Spinners
-u folderu [id] kreiramo loading.tsx fajl
-u loading.tsx fajlu kreiramo funkciju SnippetLoadingPage()
-otvorimo rutu http://localhost:3000/snippets/1 da vidimo poruku kako se ocitavaju podaci

30. A Few Quick Tasks
-u app/page.tsx fajl importujemo komponentu Link iz paketa next/link
-u metodi map() kreiramo komponentu Link
-komponenti Link dodajemo prop href, key i className
-u jsx-u kreiramo HTML elemente sa Tailwind CSS klasama

31. Styling the Show Page
-u snippets/[id]/page.tsx fajlu kreiramo HTML elemente i dodajemo im Tailwind CSS klase 

32. Linking to the Edit Page
-u folderu [id] kreiramo folder edit i page.tsx fajl
-u edit/page.tsx fajlu kreiramo funkciju SnippetEditPage()
-kreiramo interface SnippetEditPageProps
-funkciji SnippetEditPage() dodajemo parameter props
-parametru props dodajemo tip SnippetEditPageProps
-kreiramo varijablu const id
-u snippets/[id]/page.tsx fajl importujemo i kreiramo komponentu Link
-ujsx-u komponenti Link dodajemo prop href i dinamicku rutu po id-u biljeske

33. Showing a Client Component in a Server Component
-u [edit]/page.tsx fajl importujemo funkciju notFound i instancu db
-kreiramo varijable const id i const snippet
-dodajemo uslov if (!snippet)
-u uslov if (!snippet) dodajemo funkciju notFound()
-u folderu src kreiramo folder components
-u folderu components kreiramo komponentu SnippetEditForm.jsx
-funkciji SnippetEditForm() dodajemo parametar destruktuirani prop snippet
-kreiramo interface SnippetEditFormProps
-dodajemo direktivu 'use client'
-importujemo tip Snippet iz paketa prisma/client
-parametru snippet dodajemo tip SnippetEditFormProps
-u edit/page.jsx fajl importujemo komponentu SnippetEditForm.jsx
-funkciji SnippetEditPage() dodajemo async
-u jsx-u kreiramo komponentu SnippetEditForm
-komponenti SnippetEditForm dodajemo prop snippet
-u prop snippet proslijedujemo vrijednost varijable snippet

34. Adding the Monaco Editor
-otvorimo link https://www.npmjs.com/package/@monaco-editor/react
-u terminalu instaliramo paket Monaco Editor sa komandom npm i @monaco-editor/react
-u komponentu SnippetEditForm.tsx importujemo komponentu Editor iz paketa monaco-editor/react
-u jsx-u kreiramo komponentu Editor
-komponenti Editor dodajemo prop height, theme, language, defaultValue i options

35. Handling Editor Changes
-u komponenti SnippetEditForm.tsx kreiramo funkciju handleEditorChange()
-funkciji handleEditorChange() dodajemo parametar value
-parametru value dodajemo tip string = ''
-komponenti Editor dodajemo prop onChange
-u prop onChange proslijedujemo funkciju handleEditorChange
-importujemo funkciju React Hook useState
-kreiramo state varijablu const code i set funkciju setCode
-u funkciju handleEditorChange() dodajemo funkciju setCode(value)


Section 04: Server Actions in Greate Detail

36. Server Actions in Nextjs Client Components

37. Server Actions in a Separate File
-u folderu src kreiramo folder actions
-u folderu actions kreiramo index.ts fajl
-u index.ts fajl dodajemo direktivu 'use server'
-importujemo instancu db
-kreiramo i eksportujemo asinhronu funkciju editSnippet()
-u komponentu SnippetEditForm.tsx importujemo funkciju editSnippet

38. Options for Calling Server Actions from Client Components

39. Calling a Server Action from a Client Component
-u actions/index.ts fajlu funkciji editSnippet() dodajemo parametre id i code
-parametrima id i code dodajemo tip number i string
-u komponenti SnippetEditForm.tsx dodajemo metodu editSnippet.bind()
-vrijednost metode editSnippet.bind() pohranjujemo u varijablu const editSnippetAction 
-u jsx-u kreiramo form element
-form elementu dodajemo prop action
-u prop action proslijedujemo funkciju editSnippetAction
-u form elementu kreiramo button element
-button elementu dodajemo prop type i className
-u actions/index.ts fajlu, u funkciju editSnippet() dodajemo metodu await db.snippet.update()
-importujemo i kreiramo funkciju redirect()

40. Deleting a Record with a Server Action
-u actions/index.ts fajlu kreiramo i eksportujemo asinhronu funkciju deleteSnippet()
-u funkciju deleteSnippet() dodajemo metodu await db.snippet.delete()
-u snippets/[id]/page.tsx fajl importujemo funkciju deleteSnippet
-dodajemo metodu deleteSnippet.bind()
-vrijednost metode deleteSnippet.bind() pohranjujemo u varijablu const deleteSnippetAction
-u jsx-u kreiramo form element
-form elementu dodajemo prop action
-u prop action proslijedujemo vrijednost funkcije deleteSnippetAction


Section 05: Server Forms with the UseFormState Hook

41. Understanding the UseFormState Hook

42. UseFormState State in Action
-funkciju createSnippet() premjestamo iz new/page.tsx fajla u actions/index.ts fajl
-u index.ts fajlu funkciji createSnippet() dodajemo parametar formState
-u new/page.tsx fajl importujemo i kreiramo funkciju useFormState iz paketa react-dom
-importujemo funkciju createSnippet
-funkciji useFormState() dodajemo argumente funkciju createSnippet i objekt sa porukom
-dodajemo direktivu 'use client'
-vrijednost funkcije useFormState() pohranjujemo u varijable const [formState, action]
-u prop action proslijedujemo funkciju action
-u jsx-u kreiramo div element u koji dodajemo varijablu formState.message

43. Adding the Form Validation
-u actions/index.ts fajlu dodajemo uslov if u kojem provjerama da li je varijabla title string i da li sadrzi manje od 3 slova
-dodajemo uslov if za varijablu code
-u if uslove dodajemo return i objekt message
-kreiramo novu zabiljesku 

44. Gotchas Around Error Handling in Nextjs
-u folderu new kreiramo error.tsx fajl
-u error.tsx fajl dodajemo direktivu 'use client'
-kreiramo funkciju ErrorPage()
-kreiramo interface ErrorPageProps
-funkciji ErrorPage() dodajemo parametar destruktuirani prop error
-parametru error dodajemo tip ErrorPageProps
-u jsx-u kreiramo div element u koji dodajemo error poruku
-u actions/index.ts fajl, u funkciju createSnippet() dodajemo blokove koda try - catch
-u blok koda catch dodajemo uslove if (err instanceof Error) - else


Section 06: Understanding Next's Caching System

45. Super Unexpected Behaviour
-u terminalu ukucamo komandu npm run build
-u terminalu ukucamo komandu npm run start

46. The Full Route Cache System

47. What Makes a Static or Dynamic Route in Next.js
-u app/page.tsx fajlu kreiramo i eksportujemo varijablu const dynamic

48. When to Use Each Cache Control

49. Help, My Page is Showing Old Data!
-u actions/index.ts fajl importujemo funkciju revalidatePath iz paketa next/cache
-u funkcije deleteSnippet() i createSnippet() dodajemo funkciju revalidatePath()
-u terminalu ukucamo komandu npm run build
-u terminalu ukucamo komandu npm run start

50. Enabling Caching with GenerateStaticParams

51. Caching Dynamic Routes
-u snippets/[id]/page.tsx fajlu kreiramo i eksportujemo funkciju generateStaticParams()
-u funkciju generateStaticParams() dodajemo metodu await db.snippet.findMany()
-vrijednost metode await db.snippet.findMany() pohranjujemo u varijablu const snippets
-dodajemo metodu snippets.map()
-u terminalu ukucamo komandu npm run build
-u actions/index.ts fajlu, u funkciju editSnippet() dodajemo funkciju revalidatePath() za id
-u funkciju deleteSnippet() dodajemo jos jednu funkciju revalidatePath() za id
-u terminalu ukucamo komande npm run build i npm run start


Section 07: Authentication with Next-Auth

52. Next 14.2 Issues and Required Version

53. Project Overview
-u terminalu ukucamo komandu npx create-next-app

54. Critical Libraries in Our Project

55. NextUI Installation and Setup
-u terminalu ukucamo komandu npm i --save-exact @nextui-org/react@2.2.9 framer-motion
-u tailwind.config.js fajl importujemo funkciju nextui iz paketa nextui-org/react
-dodajemo opciju darkMode
-u opciju za plugins dodajemo funkciju nextui()
-u folderu app kreiramo providers.tsx fajl
-u providers.tsx fajl dodajemo direktivu 'use client'
-importujemo funkciju NextUIProvider iz paketa nextui-org/react
-kreiramo interface ProvidersProps
-kreiramo i eksportujemo funkciju Providers()
-funkciji Providers() dodajemo parametar destruktuirani prop children
-parametru children dodajemo tip ProvidersProps
-u jsx-u kreiramo komponentu NextUIProvider sa otvorenim i zatvorenim tagom
-u komponentu NextUIProvider dodajemo prop children
-u layout.tsx fajl importujemo komponentu Providers
-u jsx-u kreiramo komponentu Providers sa otvorenim i zatvorenim tagom
-u komponentu Providers dodajemo prop children
-u app/page.tsx fajl importujemo komponentu Button iz paketa nextui-org/react
-u jsx-u izbrisemo postojece HTML elemente i kreiramo novi div element
-u div elementu kreiramo komponentu Button
-u globals.css fajlu izbrisemo postojeci CSS stil
-u terminalu pokrenemo projekt sa komandom npm run dev

56. Prisma Schema File
-preuzet schema.prisma fajl

57. Database Setup
-u terminalu instaliramo paket prisma sa komandom npm i prisma
-u terminalu ukucamo komandu npx prisma init --datasource-provider sqlite
-u schema.prisma fajl kreiramo potrebne modele za projekt
-u terminalu ukucamo komandu npx prisma migrate dev
-kreiramo folder db i index.ts fajl
-u index.ts fajl importujemo funkciju PrismaClient iz paketa prisma/client
-dodajemo metodu new PrismaClient()
-vrijednost metode new PrismaClient() pohranjujemo u varijablu const db
-eksportujemo varijablu const db

58. OAuth Setup
-otvorimo link https://github.com/settings/applications/new da kreiramo novi OAuth Aplikaciju
-u Homepage URL stavimo link http://localhost:3000
-u Application Description dodamo opis aplikacije
-u Authorization callback URL stavimo link http://localhost:3000/api/auth/callback/github
-kad unesemo potrebne podatke kliknemo dugme za Registraciju aplikacije
-kreiramo fajlove .env.local i .env.local.example
-u .env.local fajlu kreiramo tri varijable GITHUB_CLINT_ID, GITHUB_CLIENT_SECRET i AUTH_SECRET
-otvorimo link https://auth-secret-gen.vercel.app/ da generisemo kod za AUTH_SECRET
-u terminalu instaliramo Auth pakete
-u terminalu ukucamo komandu npm i --save-exact @auth/core@0.18.1 @auth/prisma-adapter@1.0.6 next-auth@5.0.0-beta.3

59. Next-Auth Setup
-u folderu src kreiramo auth.ts fajl
-u auth.ts fajl importujemo instance NextAuth i Github
-importujemo funkciju PrismaAdapter
-importujemo instancu db
-kreiramo varijable cosnt GITHUB_CLIENT_ID i const GITHUB_CLIENT_SECRET
-dodajemo uslov if (!GITHUB_CLIENT_ID || GITHUB_CLIENT_SECRET)
-kreiramo funkciju NextAuth()
-u funkciji NextAuth() kreiramo konfiguracioni objekt
-u konfiguracioni objekt dodajemo opcije adapter, providers i callbacks
-vrijednost funkcije NextAuth() pohranjujemo u destruktuirane varijable const { handlers, auth, signOut, signIn }
-iz varijable handlers destruktuiramo metode GET i POST

60. The Theory Behind OAuth
-u folderu app kreiramo foldere api, auth, [...nextauth] i route.ts fajl
-u route.ts fajlu eksportujemo funkcije GET i POST
-u .eslintrc.json fajl dodajemo objekt rules

61. Wrapping Auth in Server Actions
-u folderu src kreiramo folder actions i index.ts fajl
-u index.ts fajl dodajemo direktivu 'use server'
-dodajemo import * as auth from '@/auth'
-kreiramo i eksportujemo asinhrone funkcije signIn() i signOut()

62. Sign In, Sign Out and Checking Auth Status
-u app/page.tsx fajl dodajemo import * as actions from '@/actions'
-u jsx-u, u div elementu kreiramo form element
-form elementu dodajemo prop action
-u prop action dodajemo action.signIn
-Button komponenti dodajemo prop type
-kliknemo Sign in dugme da se prijavi pomocu Github-a
-kreiramo jos jednu form element za komponentu Button Sign Out
-u app/page.tsx fajl importujemo i kreiramo funkciju auth()
-funkciji Home() dodajemo async
-vrijednost funkcije await auth() pohranjujemo u varijablu const session
-u jsx-u dodajemo ternarni uslov session?.user 
-u providers.tsx fajl importujemo komponentu SessionProvider iz paketa next-auth/react
-u jsx-u kreiramo komponentu SessionProvider sa otvorenim i zatvorenim tagom
-u src folderu kreiramo folder components
-u folderu components kreiramo komponentu Profile.tsx
-u komponentu Profile.tsx dodajemo direktivu 'use client'
-importujemo i kreiramo funkciju useSession() iz paketa next-auth/react
-vrijednost funkcije useSession() pohranjujemo u varijablu const session
-dodajemo uslov if (session.data?.user)
-u jsx-u kreiramo div element
-u app/page.tsx fajl importujemo komponentu Profile.tsx

63. Upfront Design Process
-otvorimo web stranicu https://miro.com/
-planiranje projekta